// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: colleges.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCollege = `-- name: CreateCollege :one
INSERT INTO college (created_at, updated_at, name_college, created_by) 
VALUES (
	NOW(),
	NOW(),
	$1,
	$2
)
RETURNING id, name_college, created_at, updated_at, created_by
`

type CreateCollegeParams struct {
	NameCollege string
	CreatedBy   uuid.UUID
}

func (q *Queries) CreateCollege(ctx context.Context, arg CreateCollegeParams) (College, error) {
	row := q.db.QueryRowContext(ctx, createCollege, arg.NameCollege, arg.CreatedBy)
	var i College
	err := row.Scan(
		&i.ID,
		&i.NameCollege,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getCollegeByID = `-- name: GetCollegeByID :one
SELECT id, name_college, created_at, updated_at, created_by FROM college
WHERE id = $1
`

func (q *Queries) GetCollegeByID(ctx context.Context, id int32) (College, error) {
	row := q.db.QueryRowContext(ctx, getCollegeByID, id)
	var i College
	err := row.Scan(
		&i.ID,
		&i.NameCollege,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getColleges = `-- name: GetColleges :many
SELECT id, name_college, created_at, updated_at, created_by FROM college
`

func (q *Queries) GetColleges(ctx context.Context) ([]College, error) {
	rows, err := q.db.QueryContext(ctx, getColleges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []College
	for rows.Next() {
		var i College
		if err := rows.Scan(
			&i.ID,
			&i.NameCollege,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
